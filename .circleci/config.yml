# Python CircleCI 2.0 configuration file
#
version: 2.1

orbs:
  codecov: codecov/codecov@1.0.2

references:
  working_directory: &working_directory
    ~/thefreezar-api

  tmp_working_space: &tmp_working_space
    ~/thefreezar-api/tmp

  envs: &envs
    DJANGO_SETTINGS_MODULE: src.settings

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *tmp_working_space

  save_cache: &save_cache
    save_cache:
      name: 'Saving pipenv cache'
      key: v2-dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      paths:
        - $(python3 -m pipenv --venv)

  restore_cache: &restore_cache
    restore_cache:
      name: 'Restoring pipenv cache'
      keys:
        - v2-dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
        - v2-dependencies-

  restore_repo: &restore_repo
    restore_cache:
      name: 'Restoring Directory'
      keys:
        - repo-v1-{{ .Branch }}-{{ .Revision }}
        - repo-v1-{{ .Branch }}
        - repo-v1-

  save_repo: &save_repo
    save_cache:
      name: 'Saving Directory'
      key: repo-v1-{{ .Branch }}-{{ .Revision }}
      paths:
        - .

commands:
  cmd_wait_for_database:
    description: "Waiting for Postgres to be ready."
    steps:
      - run: dockerize -wait tcp://database:5432 -timeout 1m

  cmd_install_dependencies:
    description: "Install project dependencies"
    steps:
      - run: pipenv install --system  --deploy --ignore-pipfile

  cmd_install_pipenv_and_create_requirement_file:
    description: "Install Pipenv and create requirement.txt"
    steps:
      - run: sudo pip install pipenv
      - run: pipenv lock -r > requirements.txt

  cmd_run_tests:
    description: "Install project dependencies and run tests"
    steps:
      - cmd_install_dependencies
      - run: pytest
      - codecov/upload:
          file: coverage.xml

  cmd_deploy_to_heroku:
    description: "Build and deploy to heroku"
    steps:
      - cmd_install_dependencies
      - run: |
          env >> .env
          # Login to heroku registry
          docker login --username=$HEROKU_LOGIN --password=$HEROKU_API_KEY registry.heroku.com

          #  Build docker image for the docker container
          #  Tag and Push image to heroku container registory
          docker build -t registry.heroku.com/$APP_NAME/web -f Docker/Dockerfile .
          docker push registry.heroku.com/$APP_NAME/web

          # install heroku CLI
          curl https://cli-assets.heroku.com/install.sh | sh

          # release application
          heroku container:release web --app $APP_NAME

executors:
  default_executor:
    working_directory: *working_directory
    environment: *envs
    docker:
      # specify the version you desire here
      - image: circleci/python:3.7
        environment:
          APP_SECRET: ${APP_SECRET}
          TEST_DATABASE_URL: postgres://root:root_5432@database:5432/thefreezar_api

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:11.5
        name: database
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: thefreezar_api
          POSTGRES_PASSWORD: root_5432


jobs:
  checkout_code:
    executor: default_executor
    steps:
      - *restore_repo
      - *restore_cache
      - checkout
      - *save_cache
      - *save_repo

  install_dependencies:
    executor: default_executor
    steps:
      - *restore_repo
      - *restore_cache
      - cmd_install_dependencies
      - *save_cache

  run_tests:
    executor: default_executor
    steps:
      - *attach_workspace
      - *restore_repo
      - *restore_cache
      - cmd_wait_for_database
      - cmd_run_tests
  heroku:
    executor: default_executor
    steps:
      - checkout
      - setup_remote_docker
      - *attach_workspace
      - cmd_deploy_to_heroku

workflows:
  version: 2.1
  build:
    jobs:
      - checkout_code
      - install_dependencies:
          requires:
            - checkout_code

      - run_tests:
          requires:
            - install_dependencies
          filters:
            branches:
              ignore:
                - master
      - deploy
